# -*- coding: utf-8 -*-
"""Viola-Jones-Reproduce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XUROAs3JcFtrOXx3K2ba2_g5Lmr-WBw9

## Cloning Repo
"""

!git clone https://github.com/aparande/FaceDetection.git

import sys
sys.path.append('/content/FaceDetection')

"""## Function To Evaluate Results"""

def evaluate(clf, data):
  correct = 0
  all_negatives, all_positives = 0, 0
  true_negatives, false_negatives = 0, 0
  true_positives, false_positives = 0, 0
  classification_time = 0

  for x, y in data:
    if y == 1:
        all_positives += 1
    else:
        all_negatives += 1

    start = time.time()
    prediction = clf.classify(x)
    classification_time += time.time() - start
    if prediction == 1 and y == 0:
      false_positives += 1
    if prediction == 0 and y == 1:
      false_negatives += 1
    
    correct += 1 if prediction == y else 0
  
  print("False Positive Rate: %d/%d (%f)" % (false_positives, all_negatives, false_positives/all_negatives))
  print("False Negative Rate: %d/%d (%f)" % (false_negatives, all_positives, false_negatives/all_positives))
  print("Accuracy: %d/%d (%f)" % (correct, len(data), correct/len(data)))
  print("Average Classification Time: %f" % (classification_time / len(data)))

"""## Importing Model from Cloned Repository"""

import face_detection as FaceDetection
import numpy as np
import pickle
from viola_jones import ViolaJones
from cascade import CascadeClassifier
import time

"""## Number of Weak Classifiers"""

t=10

"""## Training Viola-Jones and Saving Model"""

with open("/content/FaceDetection/training.pkl", 'rb') as f:
  training = pickle.load(f)
clf = ViolaJones(T=t)
clf.train(training, 2429, 4548)
evaluate(clf, training)
clf.save(str(t))

"""## Loading Saved Viola-Jones Model for Evaluation"""

filename=str(t)

with open("/content/FaceDetection/test.pkl", 'rb') as f:
  test = pickle.load(f)

clf = ViolaJones.load(filename)
evaluate(clf,test)

"""## Defining Cascade"""

layers=[1,10,25,25,50]
filename="Cascade"

"""## Training Cascaded Viola-Jones"""

with open("/content/FaceDetection/training.pkl", 'rb') as f:
  training = pickle.load(f)

clf = CascadeClassifier(layers)
clf.train(training)
evaluate(clf, training)
clf.save(filename)

"""## Loading Saved Cascaded Viola-Jones for Evaluation"""

with open("/content/FaceDetection/test.pkl", "rb") as f:
  test = pickle.load(f)

clf = CascadeClassifier.load(filename)
evaluate(clf, test)